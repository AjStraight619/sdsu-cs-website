generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  bio               String?
  courses           Course[]
  syllabi           Syllabus[]
  verificationToken VerificationToken?
  accounts          Account[]
  sessions          Session[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Course {
  id          String     @id @default(cuid())
  professorId String
  professor   User       @relation(fields: [professorId], references: [id])
  title       String
  description String?
  content     String?
  syllabi     Syllabus[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Syllabus {
  id          String   @id @default(cuid())
  professorId String
  professor   User     @relation(fields: [professorId], references: [id])
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  title       String?
  description String?
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
